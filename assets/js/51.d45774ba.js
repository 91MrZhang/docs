(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{455:function(v,_,t){"use strict";t.r(_);var a=t(27),r=Object(a.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h3",{attrs:{id:"原始算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原始算法"}},[v._v("#")]),v._v(" 原始算法")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th"),v._v(" "),t("th",[v._v("Mark-Sweep")]),v._v(" "),t("th",[v._v("Mark-Compact")]),v._v(" "),t("th",[v._v("Copying")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("速度")]),v._v(" "),t("td",[v._v("中等")]),v._v(" "),t("td",[v._v("最慢")]),v._v(" "),t("td",[v._v("最快")])]),v._v(" "),t("tr",[t("td",[v._v("空间开销")]),v._v(" "),t("td",[v._v("少（但会堆积碎片）")]),v._v(" "),t("td",[v._v("少（不堆积碎片）")]),v._v(" "),t("td",[v._v("通常需要活对象的2倍大小（不堆积碎片）")])]),v._v(" "),t("tr",[t("td",[v._v("移动对象")]),v._v(" "),t("td",[v._v("否")]),v._v(" "),t("td",[v._v("是")]),v._v(" "),t("td",[v._v("是")])])])]),v._v(" "),t("h4",{attrs:{id:"标记清除算法-mark-sweep"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#标记清除算法-mark-sweep"}},[v._v("#")]),v._v(" 标记清除算法 Mark-Sweep")]),v._v(" "),t("ol",[t("li",[v._v("标记出哪些对象是存活对象")]),v._v(" "),t("li",[v._v("在内存中回收存活对象之外的垃圾对象")])]),v._v(" "),t("h4",{attrs:{id:"标记压缩算法-mark-compact"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#标记压缩算法-mark-compact"}},[v._v("#")]),v._v(" 标记压缩算法 Mark-Compact")]),v._v(" "),t("ol",[t("li",[v._v("标记出哪些对象是存活对象")]),v._v(" "),t("li",[v._v("将所有存活对象压到内存一边，按顺序排放")]),v._v(" "),t("li",[v._v("清空余下空间")])]),v._v(" "),t("h4",{attrs:{id:"复制算法-copying"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#复制算法-copying"}},[v._v("#")]),v._v(" 复制算法 Copying")]),v._v(" "),t("ol",[t("li",[v._v("准备两个内存区A、B")]),v._v(" "),t("li",[v._v("标记出哪些对象是存活对象")]),v._v(" "),t("li",[v._v("将A区存活对象整体移动到B区中，并且压缩排列")]),v._v(" "),t("li",[v._v("清空A区")]),v._v(" "),t("li",[v._v("B区回收时，重复上面的操作")])]),v._v(" "),t("h5",{attrs:{id:"指针碰撞和空闲列表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#指针碰撞和空闲列表"}},[v._v("#")]),v._v(" 指针碰撞和空闲列表")]),v._v(" "),t("p",[v._v("假设java堆中内存是绝对规整的，所有用过的内存放一边，未使用过的放一边，中间有一个指针作为临界点，如果新创建了一个对象则是把指针往未分配的内存挪动与对象内存大小相同距离，这个称为指针碰撞。")]),v._v(" "),t("p",[v._v("如果Java堆中的内存分配不是规整的，"),t("strong",[v._v("虚拟机就会维护一个空闲列表")]),v._v("，用来记录剩余的可用内存空间，每次为变量分配内存后，动态的区维护这个列表")]),v._v(" "),t("h3",{attrs:{id:"改进算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#改进算法"}},[v._v("#")]),v._v(" 改进算法")]),v._v(" "),t("h4",{attrs:{id:"分代复制算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分代复制算法"}},[v._v("#")]),v._v(" 分代复制算法")]),v._v(" "),t("ol",[t("li",[v._v("将内存区划分成Eden区、s1区、s2区、Old区")]),v._v(" "),t("li",[v._v("新分配的对象在Eden区，垃圾回收时，把存活的对象放到s1区，清空Eden区")]),v._v(" "),t("li",[v._v("第二次再回收时，统计Eden区、s1区存活对象，放到s2区，清空Eden区和s1区")]),v._v(" "),t("li",[v._v("反复操作Eden、S1、S2区即可，Eden、S1、S2来回操作的过程称为Minor GC")]),v._v(" "),t("li",[v._v("如果有的对象始终不被回收，达到一定代数之后会转入到Old区，或者有的对象特别大，无法进入Eden区或者回收时无法进入S区，则直接进入Old区")]),v._v(" "),t("li",[v._v("Old区满了，一般整体再回收一次，进行FullGC，FullGC=MinorGC+MajorGC")])]),v._v(" "),t("p",[v._v("几乎现在的JVM都采用了分代模型，在分代的基础上再进行各种优化取舍")])])}),[],!1,null,null,null);_.default=r.exports}}]);